package bl4ckscor3.mod.chanceglobe;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import bl4ckscor3.mod.chanceglobe.blocks.BlockChanceGlobe;
import bl4ckscor3.mod.chanceglobe.network.IProxy;
import bl4ckscor3.mod.chanceglobe.tileentity.TileEntityChanceGlobe;
import net.minecraft.block.Block;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.util.NonNullList;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.event.ModelRegistryEvent;
import net.minecraftforge.client.model.ModelLoader;
import net.minecraftforge.common.config.Config;
import net.minecraftforge.common.config.ConfigManager;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fml.client.event.ConfigChangedEvent.OnConfigChangedEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.registry.ForgeRegistries;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;

@Mod(modid=ChanceGlobe.MODID, name=ChanceGlobe.NAME, version=ChanceGlobe.VERSION, acceptedMinecraftVersions="[" + ChanceGlobe.MC_VERSION + "]")
@EventBusSubscriber
public class ChanceGlobe
{
	public static final String MODID = "chanceglobe";
	public static final String NAME = "Chance Globe";
	public static final String VERSION = "v1.2.3";
	public static final String MC_VERSION = "1.12.2";
	@SidedProxy(clientSide = "bl4ckscor3.mod.chanceglobe.network.ClientProxy", serverSide = "bl4ckscor3.mod.chanceglobe.network.ServerProxy")
	public static IProxy proxy;
	@ObjectHolder(MODID + ":" + BlockChanceGlobe.NAME)
	public static final Block CHANCE_GLOBE = null;
	public static final NonNullList<ItemStack> BLOCKS_AND_ITEMS = NonNullList.create();

	@EventHandler
	public void preInit(FMLPreInitializationEvent event)
	{
		ModMetadata meta = event.getModMetadata();

		meta.authorList = Arrays.asList(new String[]{"bl4ckscor3"});
		meta.autogenerated = false;
		meta.description = "Spawns a random block or item upon placing it down!";
		meta.modId = MODID;
		meta.name = NAME;
		meta.version = VERSION;
		meta.url = "https://minecraft.curseforge.com/projects/chance-globe";
		proxy.registerRenderers();
	}

	@SubscribeEvent
	public static void onRegistryEventRegisterBlock(RegistryEvent.Register<Block> event)
	{
		event.getRegistry().register(new BlockChanceGlobe());
		GameRegistry.registerTileEntity(TileEntityChanceGlobe.class, new ResourceLocation(ChanceGlobe.MODID, BlockChanceGlobe.NAME));
	}

	@SubscribeEvent
	public static void onRegistryEventRegisterItem(RegistryEvent.Register<Item> event)
	{
		event.getRegistry().register(new ItemBlock(ChanceGlobe.CHANCE_GLOBE).setRegistryName(BlockChanceGlobe.NAME));
	}

	@SubscribeEvent
	public static void onModelRegistry(ModelRegistryEvent event)
	{
		ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(ChanceGlobe.CHANCE_GLOBE), 0, new ModelResourceLocation(ChanceGlobe.MODID + ":" + BlockChanceGlobe.NAME, "inventory"));
	}

	@EventHandler
	public void postInit(FMLPostInitializationEvent event)
	{
		generateItemStacks();
	}

	@SubscribeEvent
	public static void onConfigChanged(OnConfigChangedEvent event)
	{
		if(event.getModID().equals(ChanceGlobe.MODID))
		{
			ConfigManager.sync(ChanceGlobe.MODID, Config.Type.INSTANCE);
			generateItemStacks();
		}
	}

	private static void generateItemStacks()
	{
		NonNullList<ItemStack> temp = NonNullList.create();
		List<String> filteredBlocks = Arrays.asList(Configuration.filteredBlocks);
		List<String> filteredItems = Arrays.asList(Configuration.filteredItems);
		List<String> filteredMods = Arrays.asList(Configuration.filteredMods);

		BLOCKS_AND_ITEMS.clear();

		blockLoop: for(Block block : ForgeRegistries.BLOCKS)
		{
			if(Configuration.enableFilter)
			{
				switch(Configuration.filterMode)
				{
					//blacklist
					case 0: if(filteredMods.contains(block.getRegistryName().getNamespace()) || filteredBlocks.contains(block.getRegistryName().toString())) continue blockLoop; break;
					//whitelist
					case 1: if(!filteredMods.contains(block.getRegistryName().getNamespace()) && !filteredBlocks.contains(block.getRegistryName().toString())) continue blockLoop; break;
				}
			}

			Item item = Item.getItemFromBlock(block);

			if(item != Items.AIR)
			{
				if(item.getHasSubtypes())
				{
					NonNullList<ItemStack> list = NonNullList.create();

					list.add(new ItemStack(item, 1));
					item.getSubItems(CreativeTabs.SEARCH, list);
					temp.addAll(list);
				}
				else temp.add(new ItemStack(block, 1));
			}
		}

		itemLoop: for(Item item : ForgeRegistries.ITEMS)
		{
			if(item instanceof ItemBlock) //blocks were already added
				continue;

			if(Configuration.enableFilter)
			{
				switch(Configuration.filterMode)
				{
					//blacklist
					case 0: if(filteredMods.contains(item.getRegistryName().getNamespace()) || filteredItems.contains(item.getRegistryName().toString())) continue itemLoop; break;
					//whitelist
					case 1: if(!filteredMods.contains(item.getRegistryName().getNamespace()) && !filteredItems.contains(item.getRegistryName().toString())) continue itemLoop; break;
				}
			}

			if(item != Items.AIR)
			{
				if(item.getHasSubtypes())
				{
					NonNullList<ItemStack> list = NonNullList.create();

					list.add(new ItemStack(item, 1));
					item.getSubItems(CreativeTabs.SEARCH, list);
					temp.addAll(list);
				}
				else temp.add(new ItemStack(item, 1));
			}
		}

		outer: for(ItemStack stack : temp)
		{
			for(ItemStack bi : BLOCKS_AND_ITEMS)
			{
				if(stack.isItemEqual(bi))
					continue outer;
			}

			BLOCKS_AND_ITEMS.add(stack);
		}

		Collections.shuffle(BLOCKS_AND_ITEMS);
	}
}
